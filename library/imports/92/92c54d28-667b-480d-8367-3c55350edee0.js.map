{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "cc",
    "Class",
    "extends",
    "Component",
    "properties",
    "_fictitiousPoint",
    "_isTouchStart",
    "_controllerScrollMap",
    "_actionMoveMap",
    "_maxSizeMapScroll",
    "maxBiasTouch",
    "onLoad",
    "node",
    "on",
    "Node",
    "EventType",
    "TOUCH_START",
    "onTouchStart",
    "bind",
    "TOUCH_MOVE",
    "onTouchMove",
    "TOUCH_END",
    "onTouchEnd",
    "parent",
    "getComponent",
    "ScrollView",
    "v2",
    "getMaxScrollOffset",
    "onEventScroll",
    "event",
    "point",
    "getScrollOffset",
    "logRez",
    "x",
    "y",
    "myEvent",
    "Event",
    "EventCustom",
    "detail",
    "dispatchEvent",
    "stopPropagation",
    "getPointMap",
    "newX",
    "newY",
    "getPointWindow",
    "getPointMapOfOffset",
    "getInvertPoint",
    "move",
    "time",
    "scrollToOffset",
    "moveActions",
    "stopAction",
    "moveTo",
    "runAction",
    "sequence",
    "callFunc",
    "_publishFinishMoveCentreToAnimal"
  ],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "/**\r\n * Created by FIRCorp on 04.03.2017.\r\n */\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        _fictitiousPoint: null,//Точка для фиксации движения карты. Помогает различать событие движение от завершения\r\n        _isTouchStart: null,//Флаг запущен ли тач\r\n        _controllerScrollMap: null,\r\n        _actionMoveMap: null,//действие движения карты\r\n        _maxSizeMapScroll: null,//размер offset скролла. поможет при перемещении камеры от зверюшки к зверюшке\r\n\r\n        maxBiasTouch: 15,//максимальное смещение тача для определения что карта движется\r\n    },\r\n\r\n    onLoad() {\r\n\r\n        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouchStart.bind(this));\r\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove.bind(this));\r\n        this.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd.bind(this));\r\n\r\n        this._isTouchStart = false;\r\n        this._controllerScrollMap = this.node.parent.parent.getComponent(cc.ScrollView);\r\n        this._fictitiousPoint = cc.v2(0, 0);\r\n        this._maxSizeMapScroll = this._controllerScrollMap.getMaxScrollOffset();\r\n    },\r\n\r\n    /**\r\n     * Событие пораждающиеся скролом\r\n     * @param event событие которое ловит скрол\r\n     */\r\n    onEventScroll(event) {\r\n        let point = event.getScrollOffset();\r\n        let logRez = point.x === this._fictitiousPoint.x && point.y === this._fictitiousPoint.y;\r\n        (logRez && this._isTouchStart) ? this.onTouchEnd(event) : this._fictitiousPoint = point;\r\n    },\r\n\r\n    /**\r\n     * Действия на прикосновение к карте\r\n     * @param event событие которое поймает этот скрипт\r\n     */\r\n    onTouchStart(event) {\r\n        this._isTouchStart = true;\r\n        //запомнимпозиция начала эвента\r\n        let myEvent = new cc.Event.EventCustom('touchOnMap', true);\r\n        myEvent.detail = {};\r\n        this.node.dispatchEvent(myEvent);\r\n        event.stopPropagation();\r\n    },\r\n\r\n    /**\r\n     * Действия на движение touch по карте\r\n     * @param event событие которое поймает этот скрипт\r\n     */\r\n    onTouchMove(event) {\r\n        let myEvent = new cc.Event.EventCustom('touchMoveOnMap', true);\r\n        myEvent.detail = {};\r\n        this.node.dispatchEvent(myEvent);\r\n        event.stopPropagation();\r\n    },\r\n\r\n    /**\r\n     * Дейстия на откпускание touch от карты\r\n     * @param event событие которое поймает скрол либо этот скрипт\r\n     */\r\n    onTouchEnd(event) {\r\n  //      cc.log(event);\r\n        if (this._isTouchStart) {\r\n            this._isTouchStart = false;\r\n            let myEvent = new cc.Event.EventCustom('touchEndMoveOnMap', true);\r\n            myEvent.detail = {};\r\n            this.node.dispatchEvent(myEvent);\r\n\r\n        }\r\n    //    event.stopPropagation();\r\n    },\r\n\r\n    /**\r\n     * Конвентирует точку окна в точку карты\r\n     * @param point точка в окне\r\n     * @returns {Vec2} точка на карте\r\n     */\r\n    getPointMap(point) {\r\n        let newX = point.x - this.node.x;\r\n        let newY = point.y - this.node.y;\r\n        return cc.v2(newX, newY);\r\n    },\r\n\r\n    /**\r\n     * Конвертирует точку в координаты окна\r\n     * @param point точка на карте\r\n     * @returns {Vec2} точка в окне\r\n     */\r\n    getPointWindow(point) {\r\n        let newX = point.x + this.node.x;\r\n        let newY = point.y + this.node.y;\r\n        return cc.v2(newX, newY);\r\n    },\r\n\r\n    /**\r\n     * Возвращает точку карты из системы координат скролла\r\n     * @param point исходная точка\r\n     * @returns {Vec2}\r\n     */\r\n    getPointMapOfOffset(point){\r\n        let newY = this._maxSizeMapScroll.y - point.y;\r\n        return cc.v2(point.x, newY);\r\n    },\r\n\r\n    /**\r\n     * Инвертирует точку\r\n     * @param point исходная точка\r\n     * @returns {Vec2}\r\n     */\r\n    getInvertPoint(point){\r\n        let newX = -point.x;\r\n        let newY = -point.y;\r\n        return cc.v2(newX, newY);\r\n    },\r\n\r\n    /**\r\n     * Движение камеры внекоторую точку на основе метода движения скролла. С использованием его системы координат\r\n     * @param point точка в которую необходимо перейти\r\n     * @param time время за кторое производится переход\r\n     */\r\n    move(point, time = 0){\r\n        this._controllerScrollMap.scrollToOffset(this.getPointMapOfOffset(point), time);\r\n    },\r\n\r\n    /**\r\n     * Движение карты в некоторую точку на основе actions\r\n     * @param point\r\n     * @param time\r\n     */\r\n    moveActions(point, time = 0){\r\n        this.node.stopAction(this._actionMoveMap);\r\n        this._actionMoveMap = cc.moveTo(time, this.getInvertPoint(point));\r\n        this.node.runAction(\r\n            cc.sequence(this._actionMoveMap, cc.callFunc(this._publishFinishMoveCentreToAnimal, this))\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Публикует событие завершения движения камеры до животного и фиксирование его по центру экрана\r\n     * @private\r\n     */\r\n    _publishFinishMoveCentreToAnimal(){\r\n        let myEvent = new cc.Event.EventCustom('finishMoveCameraToAnimal', true);\r\n        myEvent.detail = {};\r\n        this.node.dispatchEvent(myEvent);\r\n    },\r\n\r\n\r\n});\r\n"
  ]
}