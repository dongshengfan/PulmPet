{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "BoxCreateAnimal",
    "cc",
    "Class",
    "extends",
    "_settings",
    "_type",
    "bottom",
    "timeBring",
    "bar",
    "content",
    "canvas",
    "director",
    "getWinSizeInPixels",
    "sizeBoxX",
    "_getSizeBox",
    "width",
    "node",
    "x",
    "indentLeft",
    "_startPos",
    "v2",
    "y",
    "_endPos",
    "height",
    "_amountPix",
    "Math",
    "abs",
    "publishEventOpen",
    "myEvent",
    "Event",
    "EventCustom",
    "detail",
    "dispatchEvent",
    "publishEventClose",
    "update",
    "dt",
    "_opacityNode"
  ],
  "mappings": ";;AAAA;;AAEA;;;;AAIA,IAAIA,kBAAkBC,GAAGC,KAAH,CAAS;AAC3BC,qBAD2B;;AAG3B;;;;AAIAC,aAP2B,uBAOf;AACR,aAAKC,KAAL,GAAa,aAAQC,MAArB;AACA,aAAKC,SAAL,GAAe,GAAf;AACA,YAAIC,MAAM,KAAKC,OAAf;AACA,YAAIC,SAAST,GAAGU,QAAH,CAAYC,kBAAZ,EAAb;AACA,YAAIC,WAAW,KAAKC,WAAL,CAAiBJ,OAAOK,KAAxB,CAAf;AACA,aAAKC,IAAL,CAAUC,CAAV,GAAcJ,WAAW,CAAX,GAAe,KAAKK,UAAlC;AACAV,YAAIO,KAAJ,GAAYF,QAAZ;AACA,aAAKM,SAAL,GAAiBlB,GAAGmB,EAAH,CAAM,KAAKJ,IAAL,CAAUC,CAAhB,EAAmB,KAAKD,IAAL,CAAUK,CAA7B,CAAjB;AACA,aAAKC,OAAL,GAAerB,GAAGmB,EAAH,CAAM,KAAKJ,IAAL,CAAUC,CAAhB,EAAmB,KAAKD,IAAL,CAAUK,CAAV,GAAcb,IAAIe,MAAlB,GAA2B,EAA9C,CAAf;AACA,aAAKC,UAAL,GAAkBC,KAAKC,GAAL,CAAS,KAAKJ,OAAL,CAAaD,CAAb,GAAiB,KAAKF,SAAL,CAAeE,CAAzC,CAAlB;AACH,KAlB0B;;;AAoB3B;;;AAGAM,oBAvB2B,8BAuBT;AACd,YAAIC,UAAU,IAAI3B,GAAG4B,KAAH,CAASC,WAAb,CAAyB,mBAAzB,EAA8C,IAA9C,CAAd;AACAF,gBAAQG,MAAR,GAAiB,EAAjB;AACA,aAAKf,IAAL,CAAUgB,aAAV,CAAwBJ,OAAxB;AACH,KA3B0B;;;AA6B3B;;;AAGAK,qBAhC2B,+BAgCR;AACf,YAAIL,UAAU,IAAI3B,GAAG4B,KAAH,CAASC,WAAb,CAAyB,oBAAzB,EAA+C,IAA/C,CAAd;AACAF,gBAAQG,MAAR,GAAiB,EAAjB;AACA,aAAKf,IAAL,CAAUgB,aAAV,CAAwBJ,OAAxB;AACH,KApC0B;;;AAsC3B;;;;AAIAM,UA1C2B,kBA0CpBC,EA1CoB,EA0ChB;AACP,aAAKC,YAAL,CAAkB,KAAKpB,IAAL,CAAUK,CAAV,GAAc,KAAKF,SAAL,CAAeE,CAA/C;AACH;AA5C0B,CAAT,CAAtB",
  "file": "unknown",
  "sourcesContent": [
    "import { Box, TypeBox } from './box-samples/box';\r\n\r\n/**\r\n * Бокс списка животных\r\n * @type {Function}\r\n */\r\nvar BoxCreateAnimal = cc.Class({\r\n    extends: Box,\r\n\r\n    /**\r\n     * Устанавливает начальные позиции и производит вычисление длинны\r\n     * @private\r\n     */\r\n    _settings() {\r\n        this._type = TypeBox.bottom;\r\n        this.timeBring=0.2;\r\n        let bar = this.content;\r\n        let canvas = cc.director.getWinSizeInPixels();\r\n        let sizeBoxX = this._getSizeBox(canvas.width);\r\n        this.node.x = sizeBoxX / 2 + this.indentLeft;\r\n        bar.width = sizeBoxX;\r\n        this._startPos = cc.v2(this.node.x, this.node.y);\r\n        this._endPos = cc.v2(this.node.x, this.node.y + bar.height - 10);\r\n        this._amountPix = Math.abs(this._endPos.y - this._startPos.y);\r\n    },\r\n\r\n    /**\r\n     * Публикует событие открытие бокса в контроллере\r\n     */\r\n    publishEventOpen(){\r\n        let myEvent = new cc.Event.EventCustom('openBoxFromAnimal', true);\r\n        myEvent.detail = {};\r\n        this.node.dispatchEvent(myEvent);\r\n    },\r\n\r\n    /**\r\n     * Публикует событие закрытие бокса в контроллере\r\n     */\r\n    publishEventClose(){\r\n        let myEvent = new cc.Event.EventCustom('closeBoxFromAnimal', true);\r\n        myEvent.detail = {};\r\n        this.node.dispatchEvent(myEvent);\r\n    },\r\n\r\n    /**\r\n     * Обновляет прозрачность боксов\r\n     * @param {any} dt\r\n     */\r\n    update(dt) {\r\n        this._opacityNode(this.node.y - this._startPos.y);\r\n    },\r\n});"
  ]
}