{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "MoveCircular",
    "clockwise",
    "anticlockwise",
    "CircularList",
    "cc",
    "Class",
    "extends",
    "Component",
    "properties",
    "_lengthBetweenPoints",
    "_centre",
    "Vec2",
    "_arrayAngleList",
    "_poolInvisibleList",
    "_prevRotation",
    "_stateDirection",
    "amountVisiblList",
    "angleTransition",
    "widthTransition",
    "radius",
    "sensitivity",
    "onLoad",
    "_placementListsMenu",
    "node",
    "rotation",
    "_refreshMenu",
    "window",
    "parent",
    "currentRadians",
    "x",
    "y",
    "v2",
    "width",
    "height",
    "Math",
    "PI",
    "children",
    "forEach",
    "item",
    "active",
    "push",
    "sin",
    "cos",
    "setPosition",
    "angle",
    "directionRotation",
    "locX",
    "locY",
    "_obr1",
    "_obr2",
    "_obr3",
    "_obr4",
    "_setDirection",
    "length",
    "_workingVisibleElements",
    "getAngleMenu",
    "_swapElement",
    "getAngleList",
    "floor",
    "element",
    "actualList",
    "shift",
    "name",
    "obj",
    "filter",
    "stabilizationElements"
  ],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "/**\r\n * Состояние движения меню (по часовой/против часовой).\r\n * @type {MoveCircular}\r\n * @static\r\n * @element {number} clockwise крутится по часовой.\r\n * @element {number} anticlockwise крутится против часовой.\r\n */\r\nconst MoveCircular = {\r\n    clockwise: 0,//по часовой\r\n    anticlockwise: 1,//против часовой\r\n};\r\n\r\n/**\r\n * Выполняет вращениеи размещение элементов по окружности.\r\n * @class CircularList\r\n */\r\nvar CircularList = cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        _lengthBetweenPoints: 0,//расстояние между элементами\r\n        _centre: cc.Vec2,//Центр круга\r\n        _arrayAngleList: [],///массив углов листов на которых они находятся\r\n        _poolInvisibleList: [],//массив невидимых листов\r\n        _prevRotation: 0,//предыдущий угол воворота до текущего поворота\r\n        _stateDirection: MoveCircular.clockwise,//направление движения\r\n\r\n        amountVisiblList: 7,//количество видимых липестков меню\r\n        angleTransition: 225,//угол перехода и появленияновых липестков\r\n        widthTransition: 0.3,//ширина перехода в градусах\r\n        radius: 130,//радиус на котором будут крутится все кнопки\r\n        sensitivity: 1,//Чувствителность барабана к движению свайпа по координате\r\n    },\r\n\r\n    /**\r\n     * Инициализация меню животного.\r\n     * @method onLoad\r\n     */\r\n    onLoad(){\r\n        this._placementListsMenu();\r\n        this._prevRotation = this.node.rotation;\r\n\r\n    },\r\n\r\n    /**\r\n     * Обновить позиции кнопок в меню. С учетом радиуса окружности.\r\n     * @method _refreshMenu\r\n     * @private\r\n     */\r\n    _refreshMenu(){\r\n        this._placementListsMenu();\r\n    },\r\n\r\n    /**\r\n     * Распределение кнопок по окружности.\r\n     * @method _placementListsMenu\r\n     * @private\r\n     */\r\n    _placementListsMenu(){\r\n        //рассчитываем центр круга\r\n        let window = this.node.parent;\r\n        let currentRadians = 0, x, y;\r\n        this._arrayAngleList = [];\r\n        this._poolInvisibleList = [];\r\n\r\n        this._centre = cc.v2(window.width / 2, window.height / 2);\r\n        this._lengthBetweenPoints = 2 * Math.PI / this.amountVisiblList;\r\n\r\n        this.node.children.forEach((item) => {\r\n\r\n            if (currentRadians >= 2 * Math.PI) {\r\n                item.active = false;\r\n                this._poolInvisibleList.push(item);\r\n            } else {\r\n                y = this.radius * Math.sin(currentRadians);\r\n                x = this.radius * Math.cos(currentRadians);\r\n                item.setPosition(x, y);\r\n                this._arrayAngleList.push({item: item, angle: currentRadians * (180 / Math.PI)});\r\n            }\r\n\r\n            currentRadians += this._lengthBetweenPoints;\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Определение направления вращения и вызывает соответствующий обработчик, передавая значения с\r\n     * учетом чувствительности.\r\n     * @method directionRotation\r\n     * @param {number} x дельта изменения по абциссе.\r\n     * @param {number} y дельта изменения по ординате.\r\n     * @param {number} locX положение тача по абциссе.\r\n     * @param {number} locY положение тача по ординате.\r\n     */\r\n    directionRotation(x, y, locX, locY){\r\n        //применяем чувствительность\r\n        x = x * this.sensitivity;\r\n        y = y * this.sensitivity;\r\n\r\n        if (locX > this._centre.x && locY > this._centre.y) {\r\n            this._obr1(x, y);\r\n        } else if (locX < this._centre.x && locY > this._centre.y) {\r\n            this._obr2(x, y);\r\n        } else if (locX < this._centre.x && locY < this._centre.y) {\r\n            this._obr3(x, y);\r\n        } else if (locX > this._centre.x && locY < this._centre.y) {\r\n            this._obr4(x, y);\r\n        } else {\r\n            this.node.rotation += 0.001;\r\n        }\r\n\r\n        this._setDirection();\r\n\r\n        if (this.amountVisiblList < this.node.children.length) {\r\n            this._workingVisibleElements();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Работает с появлением элементов.\r\n     * @method _workingVisibleElements\r\n     * @private\r\n     */\r\n    _workingVisibleElements(){\r\n        let angle = this.getAngleMenu();\r\n        //Узнаем для каждого элемента его угол на котором он находится\r\n        this.node.children.forEach((item) => {\r\n            if (item.active) {\r\n                this._swapElement(this.getAngleList(item, angle), item);\r\n            }\r\n            angle = this.getAngleMenu();\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Отдает угол меню.\r\n     * @method getAngleMenu\r\n     * @returns {number} угол поворота от 0 до 360.\r\n     */\r\n    getAngleMenu(){\r\n        return this.node.rotation - 360 * Math.floor(this.node.rotation / 360);\r\n    },\r\n\r\n    /**\r\n     * Работает с элементами выключая их и подставляяя за место них другие эелементы.\r\n     * @method _swapElement\r\n     * @param {number} angle угол на котором находится элемент.\r\n     * @param {cc.Node} element элемент/лист который необходимо заменить на следующий элемент из очереди невидимых элементов.\r\n     * @private\r\n     */\r\n    _swapElement(angle, element){\r\n        if (angle > this.angleTransition - this.widthTransition && angle < this.angleTransition + this.widthTransition) {\r\n            element.active = false;\r\n            let actualList = this._poolInvisibleList.shift();\r\n            actualList.setPosition(cc.v2(element.x, element.y));\r\n            actualList.rotation = element.rotation;\r\n            actualList.active = true;\r\n            this._poolInvisibleList.push(element);\r\n            this._arrayAngleList.forEach((item) => {\r\n                if (item.item.name === element.name) {\r\n                    item.item = actualList;\r\n                }\r\n            });\r\n\r\n            (this._stateDirection === MoveCircular.clockwise) ? this.node.rotation += this.widthTransition : this.node.rotation -= this.widthTransition;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Возвращает угол элемента/листа под которым он находится.\r\n     * @method getAngleList\r\n     * @param {cc.Node} element нод элемента.\r\n     * @param {number} angle угол поворота меню.\r\n     * @return {number} угол листа/элемента меню.\r\n     */\r\n    getAngleList(element, angle){\r\n        let obj = this._arrayAngleList.filter((item) => {\r\n            return item.item.x === element.x && item.item.y === element.y;\r\n        });\r\n\r\n        obj = obj[0].angle - angle;\r\n        obj -= Math.floor(obj / 360) * 360;\r\n        return obj;\r\n    },\r\n\r\n    /**\r\n     * Устанавливает состояние движения меню в зависимости от направления поворота.\r\n     * @method _setDirection\r\n     * @private\r\n     */\r\n    _setDirection(){\r\n        if (this.node.rotation > this._prevRotation) {\r\n            this._stateDirection = MoveCircular.clockwise;\r\n        } else if (this.node.rotation < this._prevRotation) {\r\n            this._stateDirection = MoveCircular.anticlockwise;\r\n        }\r\n        this._prevRotation = this.node.rotation;\r\n    },\r\n\r\n    /**\r\n     * Стабилизирует элементы меню по положению к горизонту.\r\n     * @method stabilizationElements\r\n     */\r\n    stabilizationElements(){\r\n        this.node.children.forEach((item) => {\r\n            item.rotation = -this.node.rotation;\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Обработчик первой четверти окружности. Распознает движение тача и применяет сответствующее поведение.\r\n     * Для обеспечения вращения окружности пользователем.\r\n     * @method _obr1\r\n     * @param {number} x дельта по абциссе.\r\n     * @param {number} y дельта по ординате.\r\n     * @private\r\n     */\r\n    _obr1(x, y){\r\n        this.node.rotation += x;\r\n        this.node.rotation -= y;\r\n        this.stabilizationElements();\r\n    },\r\n\r\n    /**\r\n     * Обработчик второй четверти круга. Распознает движение тача и применяет сответствующее поведение.\r\n     * Для обеспечения вращения окружности пользователем.\r\n     * @method _obr2\r\n     * @param {number} x дельта по абциссе.\r\n     * @param {number} y дельта по ординате.\r\n     * @private\r\n     */\r\n    _obr2(x, y){\r\n        this.node.rotation += x;\r\n        this.node.rotation += y;\r\n        this.stabilizationElements();\r\n    },\r\n\r\n    /**\r\n     * Обработчик третьей четверти круга. Распознает движение тача и применяет сответствующее поведение.\r\n     * Для обеспечения вращения окружности пользователем.\r\n     * @method _obr3\r\n     * @param {number} x дельта по абциссе.\r\n     * @param {number} y дельта по ординате.\r\n     * @private\r\n     */\r\n    _obr3(x, y){\r\n        this.node.rotation -= x;\r\n        this.node.rotation += y;\r\n        this.stabilizationElements();\r\n    },\r\n\r\n    /**\r\n     * Обработчик четвертой четверти круга. Распознает движение тача и применяет сответствующее поведение.\r\n     * Для обеспечения вращения окружности пользователем.\r\n     * @method _obr4\r\n     * @param {number} x дельта по абциссе.\r\n     * @param {number} y дельта по ординате.\r\n     * @private\r\n     */\r\n    _obr4(x, y){\r\n        this.node.rotation -= x;\r\n        this.node.rotation -= y;\r\n        this.stabilizationElements();\r\n    },\r\n});\r\n\r\nexport { CircularList };"
  ]
}