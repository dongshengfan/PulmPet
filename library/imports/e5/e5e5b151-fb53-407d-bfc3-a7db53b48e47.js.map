{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "Movement",
    "toClose",
    "toOpen",
    "TypeBox",
    "bottom",
    "top",
    "right",
    "left",
    "Box",
    "cc",
    "Class",
    "extends",
    "Component",
    "properties",
    "_startPos",
    "_endPos",
    "_type",
    "_direction",
    "_flagBlock",
    "_flagZaprosBlock",
    "_amountPix",
    "_actionMoveBox",
    "timeBring",
    "content",
    "Node",
    "opacityBox",
    "indentLeft",
    "indentRight",
    "onLoad",
    "node",
    "on",
    "EventType",
    "TOUCH_START",
    "onTouchStart",
    "bind",
    "TOUCH_MOVE",
    "_getPermissionMove",
    "TOUCH_END",
    "onTouchEnd",
    "start",
    "_init",
    "_settings",
    "event",
    "onTouchMove",
    "delta",
    "touch",
    "getDelta",
    "_setMovement",
    "_moveBox",
    "_endSwipe",
    "onBlock",
    "offBlock",
    "openBox",
    "closeBox",
    "y",
    "x",
    "_isCheckOutOfRange",
    "end",
    "current",
    "_isOutOfRangeLeftBottom",
    "_isOutOfRangeRightTop",
    "_bring",
    "_refocus",
    "pos",
    "moveTo",
    "runAction",
    "sequence",
    "callFunc",
    "_finishBring",
    "target",
    "_name",
    "name",
    "_getSizeBox",
    "space",
    "publishEventClose",
    "publishEventOpen",
    "_opacityNode",
    "currentPosBox",
    "opasity",
    "opacity"
  ],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "/**\r\n * Enum состояний бокса\r\n * @typedef {Object} Movement\r\n * @property {number} toClose бокс закрыт.\r\n * @property {number} toOpen бокс открыт.\r\n */\r\n\r\n/**\r\n * Состояние бокса (открыт/закрыт)\r\n * @type {Movement}\r\n */\r\nconst Movement = {\r\n    toClose: 0,\r\n    toOpen: 1,\r\n};\r\n\r\n/**\r\n * Enum состояний работы бокса\r\n * @typedef {Object} TypeBox\r\n * @property {number} bottom работа как нижний бокс.\r\n * @property {number} top работа как верхний бокс.\r\n * @property {number} right работа как правый бокс.\r\n * @property {number} left работа как левы бокс.\r\n */\r\n\r\n/**\r\n * Тип бокса\r\n * @type {{bottom: number, top: number, right: number, left: number}}\r\n */\r\nconst TypeBox = {\r\n    bottom: 0,\r\n    top: 1,\r\n    right: 2,\r\n    left: 3,\r\n};\r\n/**\r\n * Ядро боксов\r\n * @type {cc.Class}\r\n */\r\nvar Box = cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        _startPos: null,//Стартовая позиция бокса\r\n        _endPos: null,//конечная позиция бокса\r\n        _type: null,//состояние типа бокса в котором он работает\r\n        _direction: 1,//0- закрыться 1- открыться\r\n        _flagBlock: false,//флаг блокировки\r\n        _flagZaprosBlock: false,//флаг о необходиомсти блокировки\r\n        _amountPix: null,//путь для бокса\r\n        _actionMoveBox: null,//actions движения бокса\r\n\r\n        timeBring: 0.01,//Время довода в секундах\r\n        content: cc.Node,//контент над которым необходимо произвести работу\r\n        opacityBox: 30,//Прозрачность бокса \r\n        indentLeft: 50,//Отступ слева (в px)\r\n        indentRight: 50,//Отступ справа (в px)\r\n    },\r\n\r\n    /**\r\n     * Осуществляет первоначальную настройку\r\n     */\r\n    onLoad() {\r\n        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouchStart.bind(this));\r\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, this._getPermissionMove.bind(this));\r\n        this.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd.bind(this));\r\n    },\r\n\r\n    start(){\r\n        this._init();\r\n    },\r\n\r\n    /**\r\n     * Инициализация переменных\r\n     * @private\r\n     */\r\n    _init(){\r\n        //Дальнейшее действие бокса\r\n        this._direction = Movement.toOpen;\r\n        this._settings();\r\n    },\r\n\r\n    /**\r\n     * Действия на страт тача\r\n     * @param {cc.Event} event\r\n     */\r\n    onTouchStart(event) {\r\n\r\n    },\r\n\r\n    /**\r\n     * Действия на движение тача\r\n     * @param {cc.Event} event событие\r\n     */\r\n    onTouchMove(event) {\r\n        var delta = event.touch.getDelta();\r\n        if (!this._flagBlock) {\r\n            this._setMovement(delta)._moveBox(delta);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Действие на завершение тача\r\n     * @param {cc.Event} event событие\r\n     */\r\n    onTouchEnd(event) {\r\n        if (!this._flagBlock) {\r\n            this._endSwipe();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Включает блокировку бокса\r\n     */\r\n    onBlock(){\r\n        this._flagZaprosBlock = true;\r\n        this._flagBlock = true;\r\n    },\r\n\r\n    /**\r\n     * Выключает блокировку бокса\r\n     */\r\n    offBlock(){\r\n        this._flagZaprosBlock = false;\r\n        this._flagBlock = false;\r\n    },\r\n\r\n    /**\r\n     * Открывает бокс\r\n     */\r\n    openBox(){\r\n        this._direction = Movement.toOpen;\r\n        this._endSwipe();\r\n    },\r\n\r\n    /**\r\n     * Закрывает бокс\r\n     */\r\n    closeBox(){\r\n        this._direction = Movement.toClose;\r\n        this._endSwipe();\r\n    },\r\n\r\n    /**\r\n     * Определяет ожидаемое состояние по направлению движения бокса\r\n     * @param delta приращение\r\n     * @returns {Box} этот класс\r\n     * @private\r\n     */\r\n    _setMovement(delta) {\r\n        if (this._type === TypeBox.top) {\r\n            this._direction = delta.y > 0 ? Movement.toClose : Movement.toOpen;\r\n        } else if (this._type === TypeBox.bottom) {\r\n            this._direction = delta.y < 0 ? Movement.toClose : Movement.toOpen;\r\n        } else if (this._type === TypeBox.left) {\r\n            this._direction = delta.x < 0 ? Movement.toClose : Movement.toOpen;\r\n        } else {\r\n            this._direction = delta.x > 0 ? Movement.toClose : Movement.toOpen;\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Проверка на выход бокса за пределы интервала в резудьтате выполнения данного приращения. true-когда он не выходит\r\n     * @param delta приращение координаты\r\n     * @param start стартовая координа(координата закрытого бокса)\r\n     * @param end конечная координата(координата открытого бокса)\r\n     * @param current текущаа координата\r\n     * @return {boolean} true- если бокс не выходит за пределы\r\n     * @private\r\n     */\r\n    _isCheckOutOfRange(delta, start, end, current){\r\n        return start < end ? this._isOutOfRangeLeftBottom(delta, start, end, current) : this._isOutOfRangeRightTop(delta, start, end, current);\r\n    },\r\n\r\n    /**\r\n     * Проверка на выход левого и нижнего бокса за пределы интервала в резудьтате выполнения данного приращения\r\n     * @param delta приращение координаты\r\n     * @param start стартовая координа(координата закрытого бокса)\r\n     * @param end конечная координата(координата открытого бокса)\r\n     * @param current текущаа координата\r\n     * @returns {boolean} true- если бокс не выходит за пределы\r\n     * @private\r\n     */\r\n    _isOutOfRangeLeftBottom(delta, start, end, current){\r\n        return delta + current > start && delta + current < end;\r\n    },\r\n\r\n    /**\r\n     * Проверка на выход верхнего и правого бокса за пределы интервала в резудьтате выполнения данного приращения\r\n     * @param delta приращение координаты\r\n     * @param start стартовая координа(координата закрытого бокса)\r\n     * @param end конечная координата(координата открытого бокса)\r\n     * @param current текущаа координата\r\n     * @returns {boolean} true- если бокс не выходит за пределы\r\n     * @private\r\n     */\r\n    _isOutOfRangeRightTop(delta, start, end, current){\r\n        return delta + current < start && delta + current > end;\r\n    },\r\n\r\n    /**\r\n     * Движение бокса\r\n     * @param {cc.Vec2} delta приращение\r\n     * @returns {Box}\r\n     * @private\r\n     */\r\n    _moveBox(delta) {\r\n        if (this._type === TypeBox.top || this._type === TypeBox.bottom) {\r\n            (this._isCheckOutOfRange(delta.y, this._startPos.y, this._endPos.y, this.node.y)) ? this.node.y += delta.y : this._endSwipe();\r\n        } else {\r\n            (this._isCheckOutOfRange(delta.x, this._startPos.x, this._endPos.x, this.node.x)) ? this.node.x += delta.x : this._endSwipe();\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Выполняет авто доводку\r\n     * @private\r\n     */\r\n    _endSwipe(){\r\n        this._flagBlock = true;\r\n        this._direction === Movement.toClose ? this._bring(this._startPos) : this._bring(this._endPos);\r\n        this._refocus();\r\n    },\r\n\r\n    /**\r\n     * Выполняет авто довод  бокса до финальной точки назначения\r\n     * @param pos точка назначения\r\n     * @private\r\n     */\r\n    _bring(pos){\r\n        this._actionMoveBox = cc.moveTo(this.timeBring, pos);\r\n        this.node.runAction(\r\n            cc.sequence(this._actionMoveBox, cc.callFunc(this._finishBring, this))\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Функция сигнализирующая о завершении доводки бокса\r\n     * @private\r\n     */\r\n    _finishBring(){\r\n        if (!this._flagZaprosBlock) this._flagBlock = false;\r\n    },\r\n\r\n    /**\r\n     * Проверяет делает ли он это событие а не кто-то другой по ветке нодов до него\r\n     * @param event событие\r\n     * @private\r\n     */\r\n    _getPermissionMove(event) {\r\n        if (event.target._name === this.node.name) {\r\n            this.onTouchMove(event);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Возвращает размер бокса относительно пространства на стороне и условий отступов\r\n     * @param {number} space  размер боксадо приращения\r\n     * @returns {number} размер бокса\r\n     * @private\r\n     */\r\n    _getSizeBox(space) {\r\n        return space - this.indentLeft - this.indentRight;\r\n    },\r\n\r\n    /**\r\n     * Меняет действие которое необходимо сделать дальше боксу(закрыться или открыться).Публикует событие\r\n     * @private\r\n     */\r\n    _refocus() {\r\n        if (this._direction === Movement.toClose) {\r\n            this._direction = Movement.toOpen;\r\n            this.publishEventClose();\r\n        } else {\r\n            this._direction = Movement.toClose;\r\n            this.publishEventOpen();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Работа с прозрачностью бокса. Изменяет прозрачность бокса на основе положения его относительно начальных и конечных координат\r\n     * @private\r\n     */\r\n    _opacityNode(currentPosBox) {\r\n        let opasity = this.opacityBox + (((255 - this.opacityBox) * currentPosBox) / this._amountPix);\r\n        if (opasity > 255) {\r\n            opasity = 255;\r\n        } else if (opasity < this.opacityBox) {\r\n            opasity = this.opacityBox;\r\n        }\r\n        this.node.opacity = opasity;\r\n    },\r\n});\r\n\r\nexport { Box, Movement, TypeBox };"
  ]
}