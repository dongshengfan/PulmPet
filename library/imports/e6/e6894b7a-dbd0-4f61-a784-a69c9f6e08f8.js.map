{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "StateBasket",
    "sleep",
    "active",
    "work",
    "cc",
    "Class",
    "extends",
    "Component",
    "properties",
    "_leftPointBottom",
    "_rightPointTop",
    "_centrePointBasket",
    "_stateBasket",
    "anticipation",
    "opacityOn",
    "opacityOff",
    "time",
    "start",
    "_previousStatus",
    "on",
    "jobWithOpacity",
    "off",
    "onStatusActiveBasket",
    "myEvent",
    "Event",
    "EventCustom",
    "detail",
    "node",
    "dispatchEvent",
    "onStatusSleepBasket",
    "onStatusWorkBasket",
    "onGoodWorkBasket",
    "log",
    "_updateStatusBasket",
    "onBadWorkBasket",
    "opacity",
    "intevalIncrements",
    "Math",
    "abs",
    "unschedule",
    "callBackOpacity",
    "schedule",
    "isAnimalLife",
    "point",
    "x",
    "width",
    "y",
    "height",
    "X",
    "Y",
    "setPositionAnimal",
    "sqrtPoint",
    "sqrt",
    "isV"
  ],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "/**\r\n * Enum состояний корзины.\r\n * @typedef {Object} StateBasket\r\n * @property {number} sleep корзина просто открыта.\r\n * @property {number} active чувствует что животное где-то рядом.\r\n * @property {number} work работает с попавшимся животным.\r\n */\r\n\r\n/**\r\n * Типы состояний корзины.\r\n * @type {StateBasket}\r\n */\r\nconst StateBasket = {\r\n    sleep: 0,\r\n    active: 1,\r\n    work: 2,\r\n};\r\n\r\n/**\r\n * Осуществляет работу с корзиной,\r\n * Анимации, частицы и прочее.\r\n * @class basket-animal\r\n */\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        _leftPointBottom: null,//левая нижняя точка области поглащения животных\r\n        _rightPointTop: null,//правая верхняяточка области поглащения животных\r\n        _centrePointBasket: null,//центральная точка области поглащения\r\n        _stateBasket: null,//состояние корзины\r\n\r\n        anticipation: 150,//расстояние для принятия состояний взволнованности\r\n        opacityOn: 255,//прозрачность к которой стремится при включении\r\n        opacityOff: 10, //прозрачность к которой стемится после выключения\r\n        time: 1,//время за которое происходит открытие или закрытие\r\n    },\r\n\r\n\r\n    /**\r\n     * Инициализация непосредственно сразу после загрузки компонента.\r\n     * @method start\r\n     */\r\n    start(){\r\n        this._previousStatus = this._stateBasket = StateBasket.active;\r\n    },\r\n\r\n    /**\r\n     * Корзина запустилась. Запускает корзину(включает)\r\n     * @method on\r\n     */\r\n    on(){\r\n        //this.node.active = true;\r\n        this.jobWithOpacity(this.opacityOn, this.time);\r\n    },\r\n\r\n    /**\r\n     * Выключение корзины.Выключает корзину.\r\n     * @method off\r\n     */\r\n    off(){\r\n        this.jobWithOpacity(this.opacityOff, this.time);\r\n    },\r\n\r\n\r\n    /**\r\n     * Реакция корзины на приближающееся животное.\r\n     * @method onStatusActiveBasket\r\n     */\r\n    onStatusActiveBasket(){\r\n        let myEvent = new cc.Event.EventCustom('basketActive', true);\r\n        myEvent.detail = {};\r\n        this.node.dispatchEvent(myEvent);\r\n    },\r\n\r\n    /**\r\n     * Состояние сна включилось.\r\n     * @method onStatusSleepBasket\r\n     */\r\n    onStatusSleepBasket(){\r\n        let myEvent = new cc.Event.EventCustom('basketSleep', true);\r\n        myEvent.detail = {};\r\n        this.node.dispatchEvent(myEvent);\r\n    },\r\n\r\n    /**\r\n     * Состояние ловли включилось.\r\n     * @method onStatusWorkBasket\r\n     */\r\n    onStatusWorkBasket(){\r\n        let myEvent = new cc.Event.EventCustom('basketWork', true);\r\n        myEvent.detail = {};\r\n        this.node.dispatchEvent(myEvent);\r\n    },\r\n\r\n    /**\r\n     * Событие- животное поймано.\r\n     * @method onGoodWorkBasket\r\n     */\r\n    onGoodWorkBasket(){\r\n        cc.log('Еа, животное поймано (basket-animal)');\r\n        this._stateBasket = StateBasket.work;\r\n        this._updateStatusBasket();\r\n    },\r\n\r\n    /**\r\n     * Событие- животное не поймано.\r\n     * @method onBadWorkBasket\r\n     */\r\n    onBadWorkBasket(){\r\n        cc.log('Ну вот опять ничего непоймал (basket-animal)');\r\n        this._stateBasket = StateBasket.sleep;\r\n        this._updateStatusBasket();\r\n    },\r\n\r\n    /**\r\n     * Работает с прозрачностью этой корзины. Постепенно приближается к прозрачности\r\n     * корзины равной заданному значению за заданое время.\r\n     * @method jobWithOpacity\r\n     * @param {number} opacity нужно достич этой прозрачности\r\n     * @param {number} time за столько секунд\r\n     */\r\n    jobWithOpacity(opacity, time){\r\n        let intevalIncrements = time / Math.abs(this.node.opacity - opacity);\r\n        this.unschedule(this.callBackOpacity);\r\n        this.callBackOpacity = () => {\r\n            if (this.node.opacity === opacity) {\r\n                //if (this.node.opacity < 125) this.node.active = false;\r\n                this.unschedule(this.callBackOpacity);\r\n            }\r\n            (opacity > this.node.opacity) ? this.node.opacity += 1 : this.node.opacity -= 2;\r\n        }\r\n        this.schedule(this.callBackOpacity, intevalIncrements);\r\n    },\r\n\r\n    /**\r\n     * Проверяет будет ли жить животное или оно выброшено в корзину.\r\n     * @method isAnimalLife\r\n     * @param {cc.Vec2} point точка нахождения животного\r\n     * @returns {boolean} true - если животное будет жить\r\n     */\r\n    isAnimalLife(point){\r\n        this._leftPointBottom = {\r\n            x: this.node.x - this.node.width,\r\n            y: this.node.y - this.node.height\r\n        };\r\n        this._rightPointTop = {\r\n            x: this.node.x + this.node.width,\r\n            y: this.node.y + this.node.height\r\n        };\r\n        let X = point.x > this._leftPointBottom.x && point.x < this._rightPointTop.x;\r\n        let Y = point.y > this._leftPointBottom.y & point.y < this._rightPointTop.y;\r\n        return !(X && Y);\r\n    },\r\n\r\n    /**\r\n     * Сообщает корзине позицию животного для принятия решения по выбору действия. Корзина меняет свое состояние\r\n     * в зависимости от расстояния.\r\n     * @method setPositionAnimal\r\n     * @param {cc.Vec2} point точка текущего местонахождения животного\r\n     */\r\n    setPositionAnimal(point){\r\n        this._leftPointBottom = {\r\n            x: this.node.x - this.node.width,\r\n            y: this.node.y - this.node.height\r\n        };\r\n        this._rightPointTop = {\r\n            x: this.node.x + this.node.width,\r\n            y: this.node.y + this.node.height\r\n        };\r\n        this._centrePointBasket = {\r\n            x: (this._leftPointBottom.x + this._rightPointTop.x) / 2,\r\n            y: (this._rightPointTop.y + this._leftPointBottom.y) / 2\r\n        };\r\n\r\n        let x = (point.x - this._centrePointBasket.x) * (point.x - this._centrePointBasket.x);\r\n        let y = (point.y - this._centrePointBasket.y) * (point.y - this._centrePointBasket.y);\r\n        let sqrtPoint = Math.sqrt(x + y);\r\n\r\n        let isV = sqrtPoint < this.anticipation;\r\n        (isV) ? this._stateBasket = StateBasket.active : this._stateBasket = StateBasket.sleep;\r\n        this._updateStatusBasket();\r\n    },\r\n\r\n    /**\r\n     * Обновляет статус корзины и вызывает соответствующее действие.\r\n     * @method _updateStatusBasket\r\n     * @private\r\n     */\r\n    _updateStatusBasket(){\r\n        if (this._previousStatus != this._stateBasket) {\r\n            this._previousStatus = this._stateBasket;\r\n            switch (this._stateBasket) {\r\n                case StateBasket.active: {\r\n                    this.onStatusActiveBasket();\r\n                    break;\r\n                }\r\n                case StateBasket.sleep: {\r\n                    this.onStatusSleepBasket();\r\n                    break;\r\n                }\r\n                case StateBasket.work: {\r\n                    this.onStatusWorkBasket();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n});\r\n\r\n"
  ]
}