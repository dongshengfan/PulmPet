{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "BoxCharacteristicsAnimal",
    "cc",
    "Class",
    "extends",
    "_settings",
    "_type",
    "left",
    "timeBring",
    "canvas",
    "director",
    "getWinSizeInPixels",
    "sizeBoxY",
    "_getSizeBox",
    "height",
    "node",
    "y",
    "indentRight",
    "_startPos",
    "v2",
    "x",
    "_endPos",
    "width",
    "_amountPix",
    "Math",
    "abs",
    "onLoad",
    "publishEventOpen",
    "myEvent",
    "Event",
    "EventCustom",
    "detail",
    "dispatchEvent",
    "publishEventClose",
    "update",
    "dt",
    "_opacityNode"
  ],
  "mappings": ";;AAAA;;AACA;;;;AAIA,IAAIA,2BAA2BC,GAAGC,KAAH,CAAS;AACpCC,qBADoC;;AAGpC;;;;AAIAC,aAPoC,uBAOxB;AACR,aAAKC,KAAL,GAAa,aAAQC,IAArB;AACA,aAAKC,SAAL,GAAe,GAAf;AACA,YAAIC,SAASP,GAAGQ,QAAH,CAAYC,kBAAZ,EAAb;AACA,YAAIC,WAAW,KAAKC,WAAL,CAAiBJ,OAAOK,MAAxB,CAAf;AACA,aAAKC,IAAL,CAAUC,CAAV,GAAcJ,WAAW,CAAX,GAAe,KAAKK,WAAlC;AACA,aAAKF,IAAL,CAAUD,MAAV,GAAmBF,QAAnB;AACA,aAAKM,SAAL,GAAiBhB,GAAGiB,EAAH,CAAM,KAAKJ,IAAL,CAAUK,CAAhB,EAAmB,KAAKL,IAAL,CAAUC,CAA7B,CAAjB;AACA,aAAKK,OAAL,GAAenB,GAAGiB,EAAH,CAAM,KAAKJ,IAAL,CAAUK,CAAV,GAAc,KAAKL,IAAL,CAAUO,KAA9B,EAAqC,KAAKP,IAAL,CAAUC,CAA/C,CAAf;AACA,aAAKO,UAAL,GAAkBC,KAAKC,GAAL,CAAS,KAAKJ,OAAL,CAAaD,CAAb,GAAiB,KAAKF,SAAL,CAAeE,CAAzC,CAAlB;AACH,KAjBmC;AAmBpCM,UAnBoC,oBAmB5B,CAEP,CArBmC;;;AAuBpC;;;AAGAC,oBA1BoC,8BA0BlB;AACd,YAAIC,UAAU,IAAI1B,GAAG2B,KAAH,CAASC,WAAb,CAAyB,kCAAzB,EAA6D,IAA7D,CAAd;AACAF,gBAAQG,MAAR,GAAiB,EAAjB;AACA,aAAKhB,IAAL,CAAUiB,aAAV,CAAwBJ,OAAxB;AACH,KA9BmC;;;AAgCpC;;;AAGAK,qBAnCoC,+BAmCjB;AACf,YAAIL,UAAU,IAAI1B,GAAG2B,KAAH,CAASC,WAAb,CAAyB,mCAAzB,EAA8D,IAA9D,CAAd;AACAF,gBAAQG,MAAR,GAAiB,EAAjB;AACA,aAAKhB,IAAL,CAAUiB,aAAV,CAAwBJ,OAAxB;AACH,KAvCmC;;;AAyCpC;;;;AAIAM,UA7CoC,kBA6C7BC,EA7C6B,EA6CzB;AACP,aAAKC,YAAL,CAAkB,KAAKrB,IAAL,CAAUK,CAAV,GAAc,KAAKF,SAAL,CAAeE,CAA/C;AACH;AA/CmC,CAAT,CAA/B",
  "file": "unknown",
  "sourcesContent": [
    "import { Box, TypeBox } from './box-samples/box';\r\n/**\r\n * Бокс характеристик не предназначен для управление пользователем\r\n * @type {Function}\r\n */\r\nvar BoxCharacteristicsAnimal = cc.Class({\r\n    extends: Box,\r\n\r\n    /**\r\n     * Устанавливает начальные позиции и производит вычисление длинны\r\n     * @private\r\n     */\r\n    _settings() {\r\n        this._type = TypeBox.left;\r\n        this.timeBring=0.1;\r\n        let canvas = cc.director.getWinSizeInPixels();\r\n        let sizeBoxY = this._getSizeBox(canvas.height);\r\n        this.node.y = sizeBoxY / 2 + this.indentRight;\r\n        this.node.height = sizeBoxY;\r\n        this._startPos = cc.v2(this.node.x, this.node.y);\r\n        this._endPos = cc.v2(this.node.x + this.node.width, this.node.y);\r\n        this._amountPix = Math.abs(this._endPos.x - this._startPos.x);\r\n    },\r\n\r\n    onLoad(){\r\n\r\n    },\r\n\r\n    /**\r\n     * Публикует событие открытие бокса в контроллере\r\n     */\r\n    publishEventOpen(){\r\n        let myEvent = new cc.Event.EventCustom('openBoxFromCharacteristicsAnimal', true);\r\n        myEvent.detail = {};\r\n        this.node.dispatchEvent(myEvent);\r\n    },\r\n\r\n    /**\r\n     * Публикует событие закрыие бокса в контроллере\r\n     */\r\n    publishEventClose(){\r\n        let myEvent = new cc.Event.EventCustom('closeBoxFromCharacteristicsAnimal', true);\r\n        myEvent.detail = {};\r\n        this.node.dispatchEvent(myEvent);\r\n    },\r\n\r\n    /**\r\n     * Обновляет прозрачность боксов\r\n     * @param {any} dt\r\n     */\r\n    update(dt) {\r\n        this._opacityNode(this.node.x - this._startPos.x);\r\n    },\r\n});"
  ]
}