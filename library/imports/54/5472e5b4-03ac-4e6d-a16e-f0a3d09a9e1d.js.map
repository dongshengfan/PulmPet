{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "StatGame",
    "sleep",
    "openMenu",
    "openMenuAnimal",
    "createAnimal",
    "moveMap",
    "cc",
    "Class",
    "extends",
    "Component",
    "properties",
    "nodeWindow",
    "Node",
    "nodeBoxCreateAnimal",
    "nodeBoxCharacteristicsAnimal",
    "nodeBasket",
    "nodeFieldAnimals",
    "nodeBoxMap",
    "nodeMap",
    "nodeMenu",
    "nodeMenuAnimal",
    "nodeMaskCreatedAnimal",
    "prefabParametrCharacteristics",
    "Prefab",
    "colorTextCharacteristics",
    "Color",
    "_targetAnimal",
    "_pointTargetAnimal",
    "v2",
    "_targetControllerAnimal",
    "_centreWindowPoint",
    "onLoad",
    "_init",
    "node",
    "on",
    "onAnimalCreated",
    "bind",
    "onOpenBoxFromAnimal",
    "onCloseBoxFromAnimal",
    "onOpenBoxMenuPlay",
    "onCloseBoxMenuPlay",
    "onOpenBoxFromCharacteristicsAnimal",
    "onCloseBoxFromCharacteristicsAnimal",
    "onStartDragAndDropAnimal",
    "onDragAndDropAnimal",
    "onStopDragAndDropAnimal",
    "onMotionAnimal",
    "onStartMotionAnimal",
    "onEndMotionAnimal",
    "onOpenMenuAnimal",
    "onCloseMenuAnimal",
    "onVoiceAnimal",
    "onSitAnimal",
    "onFrightenAnimal",
    "onArealAnimal",
    "onCareAnimal",
    "onLieAnimal",
    "onAttentionAnimal",
    "onBasketActive",
    "onBasketSleep",
    "onBasketWork",
    "onTouchOnMap",
    "onTouchMoveOnMap",
    "onTouchEndMoveOnMap",
    "onFinishMoveCameraToAnimal",
    "_api",
    "instance",
    "_stateGame",
    "_targetSizeWith",
    "_targetSizeHeight",
    "_controllerAnimal",
    "width",
    "height",
    "_controllerCircularMenu",
    "getComponent",
    "_boxCreateAnimal",
    "_boxCharacteristicsAnimal",
    "_controllerBasket",
    "_controllerMap",
    "event",
    "log",
    "active",
    "setPosition",
    "closeMenu",
    "detail",
    "animal",
    "parent",
    "point",
    "getPointMap",
    "x",
    "y",
    "_targetPuthToModel",
    "puthToModel",
    "closeBox",
    "onBlock",
    "ScrollView",
    "enabled",
    "getPointWindow",
    "setPositionAnimal",
    "isAnimalLife",
    "model",
    "children",
    "length",
    "nodeModel",
    "instantiate",
    "addComponent",
    "settings",
    "onBadWorkBasket",
    "onGoodWorkBasket",
    "destroy",
    "off",
    "offBlock",
    "_model",
    "id",
    "controller",
    "startMotion",
    "pointEnd",
    "moveToPoint",
    "moveActions",
    "runVoice",
    "runSit",
    "runFrighten",
    "runAreal",
    "runCare",
    "runLie",
    "runAttention",
    "mass",
    "getCharacteristics",
    "content",
    "nodeParam",
    "forEach",
    "item",
    "removeAllChildren",
    "Label",
    "string",
    "name",
    "color",
    "addChild",
    "currentState",
    "vr",
    "param",
    "i",
    "getChildByName",
    "value",
    "toString",
    "unit",
    "openBox"
  ],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "import { APICore }from '../../build/build-ts';\r\n\r\n/**\r\n * Состояние игры.\r\n * @type {StatGame}\r\n * @static\r\n * @element {number} sleep бездействие.\r\n * @element {number} openMenu открытие меню игры.\r\n * @element {number} openMenuAnimal открытие меню животного.\r\n * @element {number} createAnimal создание животного.\r\n * @element {number} moveMap движение карты пользователем.\r\n */\r\nconst StatGame = {\r\n    sleep: 0,\r\n    openMenu: 1,\r\n    openMenuAnimal: 2,\r\n    createAnimal: 3,\r\n    moveMap: 4,\r\n};\r\n\r\n/**\r\n * Управляет представлнием.\r\n * @class Play\r\n */\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        nodeWindow: cc.Node,//окно игры\r\n        nodeBoxCreateAnimal: cc.Node,//всплывающий бокс с животными\r\n        nodeBoxCharacteristicsAnimal: cc.Node,//всплывающий бокс с характеристиками животного\r\n        nodeBasket: cc.Node,//корзина для удаления животного\r\n        nodeFieldAnimals: cc.Node,//поле жизнедеятельности животных\r\n        nodeBoxMap: cc.Node,//бокс с картой\r\n        nodeMap: cc.Node,//поле карты\r\n        nodeMenu: cc.Node,//поле меню игры\r\n        nodeMenuAnimal: cc.Node,//нод меню животного\r\n        nodeMaskCreatedAnimal: cc.Node,//маска для создания животных\r\n\r\n        prefabParametrCharacteristics: cc.Prefab,//префаб характеристики\r\n\r\n        colorTextCharacteristics: cc.Color,//цвет текста у характеристик\r\n\r\n        _targetAnimal: cc.Node,//нод животного в таргете\r\n        _pointTargetAnimal: cc.v2,//точка назначения животного в таргете\r\n        _targetControllerAnimal: cc.Node,//контроллер животного в таргете\r\n        _centreWindowPoint: null,//точка середины экрана\r\n    },\r\n\r\n    /**\r\n     * Инициализация конроллера представления.\r\n     * @method onLoad\r\n     */\r\n    onLoad(){\r\n        this._init();\r\n\r\n        this.node.on('createAnimal', this.onAnimalCreated.bind(this));\r\n        this.node.on('openBoxFromAnimal', this.onOpenBoxFromAnimal.bind(this));\r\n        this.node.on('closeBoxFromAnimal', this.onCloseBoxFromAnimal.bind(this));\r\n        this.node.on('openBoxMenuPlay', this.onOpenBoxMenuPlay.bind(this));\r\n        this.node.on('closeBoxMenuPlay', this.onCloseBoxMenuPlay.bind(this));\r\n\r\n        this.node.on('openBoxFromCharacteristicsAnimal', this.onOpenBoxFromCharacteristicsAnimal.bind(this));\r\n        this.node.on('closeBoxFromCharacteristicsAnimal', this.onCloseBoxFromCharacteristicsAnimal.bind(this));\r\n        this.node.on('startDragAndDropAnimal', this.onStartDragAndDropAnimal.bind(this));\r\n        this.node.on('dragAndDropAnimal', this.onDragAndDropAnimal.bind(this));\r\n        this.node.on('stopDragAndDropAnimal', this.onStopDragAndDropAnimal.bind(this));\r\n        this.node.on('motionAnimal', this.onMotionAnimal.bind(this));\r\n        this.node.on('startMotionAnimal', this.onStartMotionAnimal.bind(this));\r\n        this.node.on('endMotionAnimal', this.onEndMotionAnimal.bind(this));\r\n        this.node.on('openMenuAnimal', this.onOpenMenuAnimal.bind(this));\r\n        this.node.on('closeMenuAnimal', this.onCloseMenuAnimal.bind(this));\r\n\r\n        this.node.on('voiceAnimal', this.onVoiceAnimal.bind(this));\r\n        this.node.on('sitAnimal', this.onSitAnimal.bind(this));//сидеть\r\n        this.node.on('frightenAnimal', this.onFrightenAnimal.bind(this));//напугать\r\n        this.node.on('arealAnimal', this.onArealAnimal.bind(this));//показать ареал\r\n        this.node.on('careAnimal', this.onCareAnimal.bind(this));//Забота, гладить\r\n        this.node.on('lieAnimal', this.onLieAnimal.bind(this));//Лежать,лечь\r\n        this.node.on('attentionAnimal', this.onAttentionAnimal.bind(this));//Внимание, готовсь\r\n\r\n        this.node.on('basketActive', this.onBasketActive.bind(this));\r\n        this.node.on('basketSleep', this.onBasketSleep.bind(this));\r\n        this.node.on('basketWork', this.onBasketWork.bind(this));\r\n\r\n        this.node.on('touchOnMap', this.onTouchOnMap.bind(this));\r\n        this.node.on('touchMoveOnMap', this.onTouchMoveOnMap.bind(this));\r\n        this.node.on('touchEndMoveOnMap', this.onTouchEndMoveOnMap.bind(this));\r\n        this.node.on('finishMoveCameraToAnimal', this.onFinishMoveCameraToAnimal.bind(this));\r\n    },\r\n\r\n    /**\r\n     * Инициализация данных.\r\n     * @method _init\r\n     * @private\r\n     */\r\n    _init(){\r\n        this._api = APICore.instance();\r\n\r\n        this._stateGame = StatGame.sleep;\r\n\r\n        this._targetSizeWith = 0;//временные размеры ширины животного в таргете. Для сохранения\r\n        this._targetSizeHeight = 0;//временные размеры высоты животного в таргете. Для сохранения\r\n\r\n        this._pointTargetAnimal = cc.v2(0, 0);//точка назначения животного в таргет\r\n        this._targetAnimal = null; //нод животного в таргете\r\n        this._controllerAnimal = null;//контроллер животного (только 1 того что в таргете)\r\n        this._centreWindowPoint = cc.v2(this.node.width / 2, this.node.height / 2);\r\n        this._controllerCircularMenu = this.nodeMenuAnimal.getComponent('circular-list-actions-animal');\r\n        this._boxCreateAnimal = this.nodeBoxCreateAnimal.getComponent('box-create-animal');\r\n        this._boxCharacteristicsAnimal = this.nodeBoxCharacteristicsAnimal.getComponent('box-characteristics-animal');\r\n        this._controllerBasket = this.nodeBasket.getComponent('basket-animal');\r\n        this._controllerMap = this.nodeMap.getComponent('controller-map');\r\n\r\n    },\r\n\r\n    /**\r\n     * Бокс с животными закрылся.\r\n     * @method onCloseBoxFromAnimal\r\n     * @param {cc.Event} event\r\n     */\r\n    onCloseBoxFromAnimal(event){\r\n\r\n        cc.log('закрылся BoxFromAnimal');\r\n        if (this._stateGame != StatGame.createAnimal) {\r\n            this.nodeMaskCreatedAnimal.active = false;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Бокс с животными открылся.\r\n     * @method onOpenBoxFromAnimal\r\n     * @param {cc.Event} event\r\n     */\r\n    onOpenBoxFromAnimal(event){\r\n\r\n        cc.log('открылся BoxFromAnimal');\r\n        this.nodeMaskCreatedAnimal.active = true;//активировали маску\r\n        this.nodeMaskCreatedAnimal.setPosition(this._centreWindowPoint);\r\n        if (this._controllerAnimal !== null) this._controllerAnimal.closeMenu();\r\n\r\n    },\r\n\r\n    /**\r\n     * Меню открылось.\r\n     * @method onOpenBoxMenuPlay\r\n     * @param {cc.Event} event\r\n     */\r\n    onOpenBoxMenuPlay(event){\r\n\r\n        cc.log('открылось меню');\r\n        this.nodeMenu.active = true;\r\n    },\r\n\r\n    /**\r\n     * Меню закрылось.\r\n     * @method onCloseBoxMenuPlay\r\n     * @param {cc.Event} event\r\n     */\r\n    onCloseBoxMenuPlay(event){\r\n\r\n        cc.log('закрылось меню');\r\n        this.nodeMenu.active = false;\r\n    },\r\n\r\n    /**\r\n     * Создание животного.\r\n     * Отвечает за размещение животного в дереве нодов.\r\n     * @method onAnimalCreated\r\n     * @param {cc.Event} event\r\n     */\r\n    onAnimalCreated(event){\r\n        this._stateGame = StatGame.createAnimal;\r\n        cc.log('создание нового животного');\r\n        event.detail.animal.parent = this.nodeFieldAnimals.parent;// подцепить животное к карте\r\n        let point = this._controllerMap.getPointMap(cc.v2(this.node.width / 2, this.node.height / 2));//вычислить координаты на карте\r\n        event.detail.animal.setPosition(point.x, point.y);//Установить координаты животного\r\n        this._targetPuthToModel = event.detail.puthToModel;//Сохранить путь до модели. используется при создании модели\r\n\r\n        this._boxCreateAnimal.closeBox();//закрыть бокс с животными\r\n        this._boxCreateAnimal.onBlock();//заблокировать бокс сживотными\r\n        this._controllerBasket.on();//Включить корзину\r\n        this.nodeBoxMap.getComponent(cc.ScrollView).enabled = false;//заблокировать карту\r\n\r\n        //Необходимо закрыть все что связано с прошлым фокусом\r\n        if (this._targetAnimal != null) {\r\n\r\n            this._controllerAnimal.closeMenu();//закрывает меню\r\n            this._boxCharacteristicsAnimal.closeBox();//закрыть бокс с характеристиками\r\n            this._targetAnimal = null;//обнуляет ссылку на нод животного в фокусе\r\n\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Перетаскивание животного началось.\r\n     * @method onStartDragAndDropAnimal\r\n     * @param {cc.Event} event\r\n     */\r\n    onStartDragAndDropAnimal(event){\r\n\r\n        cc.log('запуск анимации подвешенности (старт перетаскивания)');\r\n        this._targetAnimal = event.detail.animal;//Берем нод животного в фокус\r\n        this.nodeBoxMap.getComponent(cc.ScrollView).enabled = false;//заблокировать движение карты\r\n\r\n\r\n    },\r\n\r\n    /**\r\n     * Перетаскивание нового животного.\r\n     * Отвечает за перемещение нода животного по карте после создания и производит замеры до различных объектов на карте.\r\n     * @method onDragAndDropAnimal\r\n     * @param {cc.Event} event\r\n     */\r\n    onDragAndDropAnimal(event){\r\n\r\n        cc.log('сообщаем корзине положение зверюшки (перетаскивание)');\r\n        let point = this._controllerMap.getPointWindow(event.detail.point);\r\n        this._controllerBasket.setPositionAnimal(point);\r\n        this.nodeMaskCreatedAnimal.setPosition(point);\r\n    },\r\n\r\n    /**\r\n     * Перетаскивание животного завершилось.\r\n     * @method onStopDragAndDropAnimal\r\n     * @param {cc.Event} event\r\n     */\r\n    onStopDragAndDropAnimal(event){\r\n\r\n        cc.log('определение дальнейших действий с животным (завершение перетаскивание)');\r\n        let point = this._controllerMap.getPointWindow(event.detail.point); //Запрашиваем точку в формате координаты окна\r\n\r\n        if (this._controllerBasket.isAnimalLife(point)) {\r\n\r\n            let model = this._api.createAnimal(this._targetPuthToModel, this.nodeFieldAnimals.children.length);//создаем модель животного\r\n            let nodeModel = cc.instantiate(this._targetAnimal.children[0]);//создаем нод животного\r\n            nodeModel.parent = this.nodeFieldAnimals;//Вешаем нод животного на нод со всеми животными\r\n            nodeModel.setPosition(event.detail.point.x, event.detail.point.y);//Устанавливаем позицию на карте\r\n            nodeModel.addComponent('controller-animal');//Добавляем контроллер телу животного\r\n            nodeModel.getComponent('controller-animal').settings(model);//Настраивам контроллер животного\r\n            this._controllerBasket.onBadWorkBasket();//Дать команду корзине(не сейчас)\r\n\r\n        } else {\r\n            this._controllerBasket.onGoodWorkBasket();//Дать команду корзине(работать)\r\n        }\r\n\r\n        this._targetAnimal.destroy();//Удалить временный нод животного\r\n        this._controllerBasket.off();//вырубить корзину\r\n        this._boxCreateAnimal.offBlock();//вырубить блокировку нижнего бокса\r\n        this.nodeBoxMap.getComponent(cc.ScrollView).enabled = true;//разблокировать движение карты\r\n\r\n        this._targetAnimal = null;//обнулить  животное в таргете\r\n        this._targetPuthToModel = null;//обнулить путь до модели животного\r\n        this.nodeMaskCreatedAnimal.active = false;\r\n        this._stateGame = StatGame.sleep;\r\n    },\r\n\r\n    /**\r\n     * Начало движения животного.\r\n     * @method onStartMotionAnimal\r\n     * @param {cc.Event} event\r\n     */\r\n    onStartMotionAnimal(event){\r\n        //Закрываю меню иинформацию о животном если переключаюсь на другое животное\r\n        if (this._targetAnimal != null && this._targetAnimal._model.id != event.detail.controller._model.id) {\r\n            this._controllerAnimal.closeMenu();//закрыть меню\r\n        }\r\n\r\n        cc.log('начинаю двигаться за пользователем(Начинаю выюор двигаться или открыть меню)');\r\n        let point = this._controllerMap.getPointMap(event.detail.startMotion);//конвертируем точку окна к точку карты\r\n\r\n        this._pointTargetAnimal = cc.v2(point.x, point.y);// задаем точку куда надо доставить животне\r\n        this._controllerAnimal = event.detail.controller;//получаем контроллер животного в таргете\r\n        this._targetAnimal = event.detail.controller;//установили нод животного на фокус\r\n\r\n        this.nodeBoxMap.getComponent(cc.ScrollView).enabled = false;//заблокировать карту\r\n\r\n        //увеличим поле отклика животного\r\n        this._targetSizeWith = this._targetAnimal.node.width;\r\n        this._targetSizeHeight = this._targetAnimal.node.height;\r\n    },\r\n\r\n    /**\r\n     * Движение животного за ведущим.\r\n     * @method onMotionAnimal\r\n     * @param {cc.Event} event\r\n     */\r\n    onMotionAnimal(event){\r\n        //обработка событий с животным во время движения\r\n        cc.log('двигаюсь за пользователем');\r\n        //увеличим поле отклика животного\r\n        this._targetAnimal.node.width = 2000;\r\n        this._targetAnimal.node.height = 2000;\r\n\r\n    },\r\n\r\n    /**\r\n     * Окончание движения животного.\r\n     * @method onEndMotionAnimal\r\n     * @param {cc.Event} event\r\n     */\r\n    onEndMotionAnimal(event){\r\n        cc.log('заканчиваю двигаться за пользователем');\r\n\r\n        //уменьшаем площадь покрытия животного\r\n        this._targetAnimal.node.width = this._targetSizeWith;\r\n        this._targetAnimal.node.height = this._targetSizeHeight;\r\n\r\n        let point = this._controllerMap.getPointMap(event.detail.pointEnd);// конвертируем точку окна к точке карты\r\n        this._pointTargetAnimal = cc.v2(point.x, point.y);// вычисляем точку куда пойдет животное в итоге\r\n        //сообщаем модели точку до которой необходимо ей дойти\r\n        this._targetAnimal.moveToPoint(this._pointTargetAnimal);\r\n        this.nodeBoxMap.getComponent(cc.ScrollView).enabled = true; // Разблокировали карту\r\n    },\r\n\r\n    /**\r\n     * Меню животного открыто.\r\n     * @method onOpenMenuAnimal\r\n     * @param {cc.Event} event\r\n     */\r\n    onOpenMenuAnimal(event){\r\n        cc.log('Открываю меню животного');\r\n        //Центрировать животное\r\n        let point = cc.v2(this._targetAnimal.node.x - this._centreWindowPoint.x, this._targetAnimal.node.y - this._centreWindowPoint.y);\r\n\r\n        this._controllerMap.moveActions(point, 0.25);//переместить центр камеры на эту точку за 0.25 секунды\r\n\r\n        //Устанавливаем настройки для меню\r\n        this._controllerCircularMenu.settings(this._controllerAnimal);\r\n\r\n        //заполнить бокс характеристик,,,\r\n\r\n        this.nodeBoxMap.getComponent(cc.ScrollView).enabled = false;//заблокировать карту\r\n        this._stateGame = StatGame.openMenu;\r\n    },\r\n\r\n    /**\r\n     * Меню животного закрыто.\r\n     * @method onCloseMenuAnimal\r\n     * @param {cc.Event} event\r\n     */\r\n    onCloseMenuAnimal(event){\r\n\r\n        cc.log('Закрываю меню животного');\r\n        this.nodeMenuAnimal.active = false;\r\n        this.nodeBoxMap.getComponent(cc.ScrollView).enabled = true;//разблокировать карту\r\n        this._boxCharacteristicsAnimal.closeBox();\r\n        this._targetAnimal = null;\r\n        this._stateGame = StatGame.sleep;\r\n    },\r\n\r\n    /**\r\n     * Животное издало звук.\r\n     * @method onVoiceAnimal\r\n     * @param {cc.Event} event\r\n     */\r\n    onVoiceAnimal(event){\r\n        cc.log('животное проявило голос');\r\n        this._controllerAnimal.runVoice();\r\n        this._controllerAnimal.closeMenu();\r\n    },\r\n\r\n    /**\r\n     * Животное село\r\n     * @method onSitAnimal\r\n     * @param {cc.Event} event\r\n     */\r\n    onSitAnimal(event){\r\n        cc.log('животное село');\r\n        this._controllerAnimal.runSit();\r\n        this._controllerAnimal.closeMenu();\r\n    },\r\n\r\n    /**\r\n     * Животное испугалось\r\n     * @method onFrightenAnimal\r\n     * @param {cc.Event} event\r\n     */\r\n    onFrightenAnimal(event){\r\n        cc.log('животное испугалось');\r\n        this._controllerAnimal.runFrighten();\r\n        this._controllerAnimal.closeMenu();\r\n    },\r\n\r\n    /**\r\n     * ареалы чувств\r\n     * @method onArealAnimal\r\n     * @param {cc.Event} event\r\n     */\r\n    onArealAnimal(event){\r\n        cc.log('животное показало свой ареал');\r\n        this._controllerAnimal.runAreal();\r\n        this._controllerAnimal.closeMenu();\r\n    },\r\n\r\n    /**\r\n     * Животное погладили,пожалели\r\n     * @method onCareAnimal\r\n     * @param {cc.Event} event\r\n     */\r\n    onCareAnimal(event){\r\n        cc.log('животное погладили');\r\n        this._controllerAnimal.runCare();\r\n        this._controllerAnimal.closeMenu();\r\n    },\r\n\r\n    /**\r\n     * Животное легло\r\n     * @method onLieAnimal\r\n     * @param {cc.Event} event\r\n     */\r\n    onLieAnimal(event){\r\n        cc.log('животное легло');\r\n        this._controllerAnimal.runLie();\r\n        this._controllerAnimal.closeMenu();\r\n    },\r\n\r\n    /**\r\n     * Животное приготовилось\r\n     * @method onAttentionAnimal\r\n     * @param {cc.Event} event\r\n     */\r\n    onAttentionAnimal(event){\r\n        cc.log('животное приготовилось');\r\n        this._controllerAnimal.runAttention();\r\n        this._controllerAnimal.closeMenu();\r\n    },\r\n\r\n    /**\r\n     * Бокс характристик животного открылся.\r\n     * @method onOpenBoxFromCharacteristicsAnimal\r\n     * @param {cc.Event} event\r\n     */\r\n    onOpenBoxFromCharacteristicsAnimal(event){\r\n\r\n        cc.log('открылся BoxFromCharacteristicsAnimal');\r\n        this._boxCreateAnimal.closeBox();\r\n        //заполняет характеристики\r\n        let mass = this._controllerAnimal.getCharacteristics();\r\n        let content = this._boxCharacteristicsAnimal.content;\r\n\r\n        let nodeParam;\r\n        //чистим предыдущие записи\r\n        content.children.forEach((item) => {\r\n            item.destroy();\r\n        });\r\n\r\n        //Начинаем заполнение\r\n        nodeParam = cc.instantiate(this.prefabParametrCharacteristics);\r\n        nodeParam.removeAllChildren();\r\n        nodeParam.addComponent(cc.Label).string = mass.name;\r\n        nodeParam.color = this.colorTextCharacteristics;\r\n        content.addChild(nodeParam);\r\n\r\n        nodeParam = cc.instantiate(this.prefabParametrCharacteristics);\r\n        nodeParam.removeAllChildren();\r\n        nodeParam.addComponent(cc.Label).string = mass.currentState;\r\n        nodeParam.color = this.colorTextCharacteristics;\r\n        content.addChild(nodeParam);\r\n\r\n        let vr;//временная переменная узлов\r\n        //заполняем характеристики\r\n        if (mass.param.length != 0) {\r\n            for (let i = 0; i < mass.param.length; i++) {\r\n                nodeParam = cc.instantiate(this.prefabParametrCharacteristics);\r\n                content.addChild(nodeParam);\r\n                nodeParam.x = 0;\r\n                vr = nodeParam.getChildByName('name');\r\n                vr.getComponent(cc.Label).string = mass.param[i].name;\r\n                vr.color = this.colorTextCharacteristics;\r\n                vr = nodeParam.getChildByName('value');\r\n                vr.getComponent(cc.Label).string = mass.param[i].value.toString() + mass.param[i].unit;\r\n                vr.color = this.colorTextCharacteristics;\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Бокс характеристик животного закрылся.\r\n     * @method onCloseBoxFromCharacteristicsAnimal\r\n     * @param {cc.Event} event\r\n     */\r\n    onCloseBoxFromCharacteristicsAnimal(event){\r\n\r\n        cc.log('закрылся BoxFromCharacteristicsAnimal');\r\n\r\n    },\r\n\r\n    /**\r\n     * Корзина перешла в событие активного предвкушения.\r\n     * @method onBasketActive\r\n     * @param {cc.Event} event\r\n     */\r\n    onBasketActive(event){\r\n\r\n        cc.log('корзина проявляет активность');\r\n\r\n    },\r\n\r\n    /**\r\n     * Корзина перешла в режим сна.\r\n     * @method onBasketSleep\r\n     * @param {cc.Event} event\r\n     */\r\n    onBasketSleep(event){\r\n\r\n        cc.log('корзина спит');\r\n    },\r\n\r\n    /**\r\n     * Корзина перешла в режим работы (Вот вот сбросят животное).\r\n     * @method onBasketWork\r\n     * @param {cc.Event} event\r\n     */\r\n    onBasketWork(event){\r\n\r\n        cc.log('корзина надеется что вот вот в нее попадет животное');\r\n\r\n    },\r\n\r\n    /**\r\n     * Событие начала работы с картой.\r\n     * @method onTouchOnMap\r\n     * @param {cc.Event} event\r\n     */\r\n    onTouchOnMap(event){\r\n\r\n        cc.log('Начал работу с картой');\r\n\r\n    },\r\n\r\n    /**\r\n     * Событие движения карты.\r\n     * @method onTouchMoveOnMap\r\n     * @param {cc.Event} event\r\n     */\r\n    onTouchMoveOnMap(event){\r\n\r\n        cc.log('Двигает карту');\r\n    },\r\n\r\n    /**\r\n     * Событие завершения работы с картой.\r\n     * @method onTouchEndMoveOnMap\r\n     * @param {cc.Event} event\r\n     */\r\n    onTouchEndMoveOnMap(event){\r\n\r\n        if (this._stateGame === StatGame.sleep) {\r\n            cc.log('завершил работу с картой');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Наведение центра камеры на животное завершилось.\r\n     * @method onFinishMoveCameraToAnimal\r\n     * @param {cc.Event} event\r\n     */\r\n    onFinishMoveCameraToAnimal(event){\r\n\r\n        this.nodeMenuAnimal.active = true;\r\n        this.nodeMenuAnimal.setPosition(this._centreWindowPoint.x, this._centreWindowPoint.y);\r\n        this._boxCharacteristicsAnimal.openBox();\r\n    },\r\n\r\n});"
  ]
}