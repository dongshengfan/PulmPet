{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "cc",
    "Class",
    "extends",
    "Component",
    "properties",
    "_model",
    "_maxBiasTouch",
    "_pointTouchForMenu",
    "v2",
    "_isMove",
    "_isOpenMenu",
    "onLoad",
    "_api",
    "instance",
    "node",
    "on",
    "Node",
    "EventType",
    "TOUCH_MOVE",
    "_onTouchMoveAnimal",
    "bind",
    "TOUCH_START",
    "_onTouchStartAnimal",
    "TOUCH_END",
    "_onTouchEndAnimal",
    "settings",
    "pack",
    "createAnimal",
    "puthToModel",
    "id",
    "log",
    "children",
    "settingCollider",
    "navigation",
    "radiusVision",
    "getComponent",
    "CircleCollider",
    "radiusHearing",
    "radiusSmell",
    "radiusTouch",
    "system",
    "component",
    "undefined",
    "radius",
    "current",
    "event",
    "myEvent",
    "Event",
    "EventCustom",
    "detail",
    "startMotion",
    "x",
    "y",
    "controller",
    "dispatchEvent",
    "getLocation",
    "stopPropagation",
    "delta",
    "touch",
    "getDelta",
    "_isCheckOnOpenMenu",
    "deltaMotion",
    "pointEnd",
    "_refocusMenu",
    "point",
    "X",
    "Math",
    "abs",
    "Y",
    "_publishOpenMenuAnimal",
    "_publishCloseMenuAnimal",
    "openMenu",
    "closeMenu",
    "moveToPoint",
    "run",
    "runLife",
    "runVoice",
    "runSit",
    "runFrighten",
    "runAreal",
    "runCare",
    "runLie",
    "runAttention",
    "getCharacteristics"
  ],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "import { APICore }from '../../build/build-ts';\r\n/**\r\n *\r\n */\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        _model: null,//модель животного\r\n\r\n        _maxBiasTouch: 15,//максимальное смещение тача для открытия меню (px)\r\n        _pointTouchForMenu: cc.v2,//точка старта тача по животному\r\n\r\n        _isMove: false,//флаг для определения движется ли живоное за пользователем\r\n        _isOpenMenu: false,//флаг для определения открыто ли меню\r\n    },\r\n\r\n    onLoad(){\r\n        this._api = APICore.instance();\r\n        this._isOpenMenu = false;\r\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoveAnimal.bind(this));\r\n        this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchStartAnimal.bind(this));\r\n        this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEndAnimal.bind(this));\r\n    },\r\n\r\n\r\n    /**\r\n     * Настраивает доступные действия плюшки для животного и характеристики\r\n     */\r\n    settings(pack){\r\n        this._model = this._api.createAnimal(pack.puthToModel, pack.id);//создаем модель животного\r\n\r\n        cc.log(this.node.children);\r\n        this.settingCollider(this._model.navigation.radiusVision,this.node.children[0].getComponent(cc.CircleCollider));\r\n        this.settingCollider(this._model.navigation.radiusHearing,this.node.children[1].getComponent(cc.CircleCollider));\r\n        this.settingCollider(this._model.navigation.radiusSmell,this.node.children[2].getComponent(cc.CircleCollider));\r\n        this.settingCollider(this._model.navigation.radiusTouch,this.node.children[3].getComponent(cc.CircleCollider));\r\n\r\n    },\r\n\r\n    /**\r\n     * Настраивает коллайдеры у животного согласно его модели\r\n     * @method settingCollider\r\n     * @param {Animals.Systems.ISystem} system\r\n     * @param {cc.CircleCollider} component\r\n     */\r\n    settingCollider(system,component){\r\n        system===undefined?component.radius=0:component.radius=system.current;\r\n    },\r\n\r\n    /**\r\n     * Обработчик события начала тача\r\n     * @param event\r\n     * @private\r\n     */\r\n    _onTouchStartAnimal(event){\r\n        let myEvent = new cc.Event.EventCustom('startMotionAnimal', true);\r\n        myEvent.detail = {\r\n            startMotion: cc.v2(this.node.x, this.node.y),\r\n            controller: this,\r\n        };\r\n        this.node.dispatchEvent(myEvent);//разослали евент\r\n        this._isMove = false;//животное не движется за пользователем\r\n        this._pointTouchForMenu = event.getLocation();//считали точку первого нажатия\r\n        event.stopPropagation();\r\n    },\r\n\r\n    /**\r\n     * Обработчик события движения тача.\r\n     * @param event\r\n     * @private\r\n     */\r\n    _onTouchMoveAnimal(event){\r\n        //   cc.log(event);\r\n        var delta = event.touch.getDelta();\r\n        if (this._isCheckOnOpenMenu(event.getLocation()) && !this._isOpenMenu) {\r\n            this._isMove = true;\r\n            let myEvent = new cc.Event.EventCustom('motionAnimal', true);\r\n            myEvent.detail = {\r\n                deltaMotion: delta,\r\n                pointEnd: event.getLocation()\r\n            };\r\n            this.node.dispatchEvent(myEvent);\r\n        }\r\n        event.stopPropagation();\r\n    },\r\n\r\n    /**\r\n     * Обработчик события завершения тача\r\n     * @param event\r\n     * @private\r\n     */\r\n    _onTouchEndAnimal(event){\r\n        if (this._isMove) {\r\n            let myEvent = new cc.Event.EventCustom('endMotionAnimal', true);\r\n            myEvent.detail = {\r\n                pointEnd: event.getLocation(),\r\n            };\r\n            this.node.dispatchEvent(myEvent);\r\n            this._isMove = false;\r\n        } else {\r\n            this._refocusMenu();\r\n        }\r\n        event.stopPropagation();\r\n    },\r\n\r\n    /**\r\n     * Проверяет открывается меню или нет. Путем сканирования точки тача на выходза пределы от начапльной точки\r\n     * @param point\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    _isCheckOnOpenMenu(point){\r\n        let X = Math.abs(this._pointTouchForMenu.x - point.x) > this._maxBiasTouch;\r\n        let Y = Math.abs(this._pointTouchForMenu.y - point.y) > this._maxBiasTouch;\r\n        return X || Y;\r\n    },\r\n\r\n    /**\r\n     * Изменяет состояние меню\r\n     * @private\r\n     */\r\n    _refocusMenu(){\r\n        this._isOpenMenu = !this._isOpenMenu;\r\n        (this._isOpenMenu) ? this._publishOpenMenuAnimal() : this._publishCloseMenuAnimal();\r\n\r\n    },\r\n\r\n    /**\r\n     * Открытие меню животного\r\n     */\r\n    _publishOpenMenuAnimal(){\r\n        let myEvent = new cc.Event.EventCustom('openMenuAnimal', true);\r\n        myEvent.detail = {\r\n            controller: this,\r\n        };\r\n        this.node.dispatchEvent(myEvent);\r\n    },\r\n\r\n    /**\r\n     * Закрыто меню с животными\r\n     */\r\n    _publishCloseMenuAnimal(){\r\n        let myEvent = new cc.Event.EventCustom('closeMenuAnimal', true);\r\n        myEvent.detail = {\r\n            controller: this,\r\n        };\r\n        this.node.dispatchEvent(myEvent);\r\n    },\r\n\r\n    /**\r\n     * Открытие меню\r\n     */\r\n    openMenu(){\r\n        this._isOpenMenu = true;\r\n        this._publishOpenMenuAnimal();\r\n    },\r\n\r\n    /**\r\n     * Закрыть меню\r\n     */\r\n    closeMenu(){\r\n        this._isOpenMenu = false;\r\n        this._publishCloseMenuAnimal();\r\n    },\r\n\r\n    /**\r\n     * Сообщает модели до какой точки надо дойти\r\n     * @param point\r\n     */\r\n    moveToPoint(point){\r\n        this._model.moveToPoint(point);\r\n    },\r\n\r\n    /**\r\n     * Запускает жизнь животного\r\n     * @method run\r\n     */\r\n    run(){\r\n        this._model.runLife();\r\n    },\r\n\r\n    /**\r\n     * Подать звук\r\n     */\r\n    runVoice(){\r\n\r\n    },\r\n\r\n    /**\r\n     * Сесть\r\n     */\r\n    runSit(){\r\n\r\n    },\r\n\r\n    /**\r\n     * Испугаться\r\n     */\r\n    runFrighten(){\r\n\r\n    },\r\n\r\n    /**\r\n     * Показать ареалы\r\n     */\r\n    runAreal(){\r\n\r\n    },\r\n\r\n    /**\r\n     * Поласкаться\r\n     */\r\n    runCare(){\r\n\r\n    },\r\n\r\n    /**\r\n     * Лечь\r\n     */\r\n    runLie(){\r\n\r\n    },\r\n\r\n    /**\r\n     * Приготовиться\r\n     */\r\n    runAttention(){\r\n\r\n    },\r\n\r\n    /**\r\n     * Возвращает массив характеристик у животного\r\n     * @return {*|any}\r\n     */\r\n    getCharacteristics(){\r\n        return this._model.getCharacteristics();\r\n    }\r\n\r\n});"
  ]
}