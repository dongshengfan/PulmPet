{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "cc",
    "Class",
    "extends",
    "Component",
    "properties",
    "_model",
    "_maxBiasTouch",
    "_pointTouchForMenu",
    "v2",
    "_isMove",
    "_isOpenMenu",
    "onLoad",
    "node",
    "on",
    "Node",
    "EventType",
    "TOUCH_MOVE",
    "_onTouchMoveAnimal",
    "bind",
    "TOUCH_START",
    "_onTouchStartAnimal",
    "TOUCH_END",
    "_onTouchEndAnimal",
    "settings",
    "model",
    "log",
    "children",
    "settingCollider",
    "navigation",
    "radiusVision",
    "getComponent",
    "CircleCollider",
    "radiusHearing",
    "radiusSmell",
    "radiusTouch",
    "system",
    "component",
    "undefined",
    "radius",
    "current",
    "event",
    "myEvent",
    "Event",
    "EventCustom",
    "detail",
    "startMotion",
    "x",
    "y",
    "controller",
    "dispatchEvent",
    "getLocation",
    "stopPropagation",
    "delta",
    "touch",
    "getDelta",
    "_isCheckOnOpenMenu",
    "deltaMotion",
    "pointEnd",
    "_refocusMenu",
    "point",
    "X",
    "Math",
    "abs",
    "Y",
    "_publishOpenMenuAnimal",
    "_publishCloseMenuAnimal",
    "openMenu",
    "closeMenu",
    "moveToPoint",
    "run",
    "runLife",
    "runVoice",
    "runSit",
    "runFrighten",
    "runAreal",
    "runCare",
    "runLie",
    "runAttention",
    "getCharacteristics"
  ],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "/**\r\n *\r\n */\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        _model: null,//модель животного\r\n\r\n        _maxBiasTouch: 15,//максимальное смещение тача для открытия меню (px)\r\n        _pointTouchForMenu: cc.v2,//точка старта тача по животному\r\n\r\n        _isMove: false,//флаг для определения движется ли живоное за пользователем\r\n        _isOpenMenu: false,//флаг для определения открыто ли меню\r\n    },\r\n\r\n    onLoad(){\r\n        this._isOpenMenu = false;\r\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoveAnimal.bind(this));\r\n        this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchStartAnimal.bind(this));\r\n        this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEndAnimal.bind(this));\r\n    },\r\n\r\n\r\n    /**\r\n     * Настраивает доступные действия плюшки для животного и характеристики\r\n     */\r\n    settings(model){\r\n        this._model = model;\r\n        cc.log(this.node.children);\r\n        this.settingCollider(this._model.navigation.radiusVision,this.node.children[0].getComponent(cc.CircleCollider));\r\n        this.settingCollider(this._model.navigation.radiusHearing,this.node.children[1].getComponent(cc.CircleCollider));\r\n        this.settingCollider(this._model.navigation.radiusSmell,this.node.children[2].getComponent(cc.CircleCollider));\r\n        this.settingCollider(this._model.navigation.radiusTouch,this.node.children[3].getComponent(cc.CircleCollider));\r\n\r\n    },\r\n\r\n    /**\r\n     * Настраивает коллайдеры у животного согласно его модели\r\n     * @method settingCollider\r\n     * @param {Animals.Systems.ISystem} system\r\n     * @param {cc.CircleCollider} component\r\n     */\r\n    settingCollider(system,component){\r\n        system===undefined?component.radius=0:component.radius=system.current;\r\n    },\r\n\r\n    /**\r\n     * Обработчик события начала тача\r\n     * @param event\r\n     * @private\r\n     */\r\n    _onTouchStartAnimal(event){\r\n        let myEvent = new cc.Event.EventCustom('startMotionAnimal', true);\r\n        myEvent.detail = {\r\n            startMotion: cc.v2(this.node.x, this.node.y),\r\n            controller: this,\r\n        };\r\n        this.node.dispatchEvent(myEvent);//разослали евент\r\n        this._isMove = false;//животное не движется за пользователем\r\n        this._pointTouchForMenu = event.getLocation();//считали точку первого нажатия\r\n        event.stopPropagation();\r\n    },\r\n\r\n    /**\r\n     * Обработчик события движения тача.\r\n     * @param event\r\n     * @private\r\n     */\r\n    _onTouchMoveAnimal(event){\r\n        //   cc.log(event);\r\n        var delta = event.touch.getDelta();\r\n        if (this._isCheckOnOpenMenu(event.getLocation()) && !this._isOpenMenu) {\r\n            this._isMove = true;\r\n            let myEvent = new cc.Event.EventCustom('motionAnimal', true);\r\n            myEvent.detail = {\r\n                deltaMotion: delta,\r\n                pointEnd: event.getLocation()\r\n            };\r\n            this.node.dispatchEvent(myEvent);\r\n        }\r\n        event.stopPropagation();\r\n    },\r\n\r\n    /**\r\n     * Обработчик события завершения тача\r\n     * @param event\r\n     * @private\r\n     */\r\n    _onTouchEndAnimal(event){\r\n        if (this._isMove) {\r\n            let myEvent = new cc.Event.EventCustom('endMotionAnimal', true);\r\n            myEvent.detail = {\r\n                pointEnd: event.getLocation(),\r\n            };\r\n            this.node.dispatchEvent(myEvent);\r\n            this._isMove = false;\r\n        } else {\r\n            this._refocusMenu();\r\n        }\r\n        event.stopPropagation();\r\n    },\r\n\r\n    /**\r\n     * Проверяет открывается меню или нет. Путем сканирования точки тача на выходза пределы от начапльной точки\r\n     * @param point\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    _isCheckOnOpenMenu(point){\r\n        let X = Math.abs(this._pointTouchForMenu.x - point.x) > this._maxBiasTouch;\r\n        let Y = Math.abs(this._pointTouchForMenu.y - point.y) > this._maxBiasTouch;\r\n        return X || Y;\r\n    },\r\n\r\n    /**\r\n     * Изменяет состояние меню\r\n     * @private\r\n     */\r\n    _refocusMenu(){\r\n        this._isOpenMenu = !this._isOpenMenu;\r\n        (this._isOpenMenu) ? this._publishOpenMenuAnimal() : this._publishCloseMenuAnimal();\r\n\r\n    },\r\n\r\n    /**\r\n     * Открытие меню животного\r\n     */\r\n    _publishOpenMenuAnimal(){\r\n        let myEvent = new cc.Event.EventCustom('openMenuAnimal', true);\r\n        myEvent.detail = {\r\n            controller: this,\r\n        };\r\n        this.node.dispatchEvent(myEvent);\r\n    },\r\n\r\n    /**\r\n     * Закрыто меню с животными\r\n     */\r\n    _publishCloseMenuAnimal(){\r\n        let myEvent = new cc.Event.EventCustom('closeMenuAnimal', true);\r\n        myEvent.detail = {\r\n            controller: this,\r\n        };\r\n        this.node.dispatchEvent(myEvent);\r\n    },\r\n\r\n    /**\r\n     * Открытие меню\r\n     */\r\n    openMenu(){\r\n        this._isOpenMenu = true;\r\n        this._publishOpenMenuAnimal();\r\n    },\r\n\r\n    /**\r\n     * Закрыть меню\r\n     */\r\n    closeMenu(){\r\n        this._isOpenMenu = false;\r\n        this._publishCloseMenuAnimal();\r\n    },\r\n\r\n    /**\r\n     * Сообщает модели до какой точки надо дойти\r\n     * @param point\r\n     */\r\n    moveToPoint(point){\r\n        this._model.moveToPoint(point);\r\n    },\r\n\r\n    /**\r\n     * Запускает жизнь животного\r\n     * @method run\r\n     */\r\n    run(){\r\n        this._model.runLife();\r\n    },\r\n\r\n    /**\r\n     * Подать звук\r\n     */\r\n    runVoice(){\r\n\r\n    },\r\n\r\n    /**\r\n     * Сесть\r\n     */\r\n    runSit(){\r\n\r\n    },\r\n\r\n    /**\r\n     * Испугаться\r\n     */\r\n    runFrighten(){\r\n\r\n    },\r\n\r\n    /**\r\n     * Показать ареалы\r\n     */\r\n    runAreal(){\r\n\r\n    },\r\n\r\n    /**\r\n     * Поласкаться\r\n     */\r\n    runCare(){\r\n\r\n    },\r\n\r\n    /**\r\n     * Лечь\r\n     */\r\n    runLie(){\r\n\r\n    },\r\n\r\n    /**\r\n     * Приготовиться\r\n     */\r\n    runAttention(){\r\n\r\n    },\r\n\r\n    /**\r\n     * Возвращает массив характеристик у животного\r\n     * @return {*|any}\r\n     */\r\n    getCharacteristics(){\r\n        return this._model.getCharacteristics();\r\n    }\r\n\r\n});"
  ]
}